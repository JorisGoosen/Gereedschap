#version 460

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;
/*
struct
{
	float	heteroKracht,
			homoKracht,	
			honger,		
			levend;		
} dier;

struct
{
	float	posX,
			posY,
			lichtheid,
			roodheid;
} PlaatsKleur;
*/

layout(std430, binding = 0) buffer	wijZijnE	{ vec4 		wijEIn	[]; };
layout(std430, binding = 1) buffer	wijWordenE 	{ vec4 		wijEUit	[]; };
layout(std430, binding = 2) buffer	wijZijnP	{ vec4 		wijPIn	[]; };
layout(std430, binding = 3) buffer	wijWordenP 	{ vec4 		wijPUit	[]; };

layout(std430, binding = 4) buffer	anderP		{ vec4 		zijPIn	[]; };

uniform uint anderLengte;
uniform uint onzeLengte;
uniform bool jeBentWolf;

const float dimensions = 10.0;

vec2 rotate(vec2 uv, float th) {
    return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;
}

void main()
{
	vec2 	mijnPos = wijPIn[gl_GlobalInvocationID.x].xy,
			mijnSpd = wijPIn[gl_GlobalInvocationID.x].zw,
		 	onzePos = vec2(0.0),
			hunPos 	= vec2(0.0),
			onzeK	= wijEIn[gl_GlobalInvocationID.x].xy,
			onzeHL	= wijEIn[gl_GlobalInvocationID.x].zw;

	onzeHL.x += 0.0001;
	//onzeHL.y -= 0.01;

	bool ikOverlapMetAnder = false;
	const float epsilon = 0.1,
			kijk = jeBentWolf ? 4 : 1;

	float onzeGevonden = 0,
			hunGevonden = 0;

	for(uint i=0; i<onzeLengte; i++)
		if(distance(wijPIn[i].xy, mijnPos) < kijk)
		{
			onzePos += wijPIn[i].xy;
			onzeGevonden++;
		}

	for(uint i=0; i<anderLengte; i++)
	{
		float afstand = distance(mijnPos, zijPIn[i].xy);
		if(afstand < epsilon)
			ikOverlapMetAnder = true;
		else if(afstand < kijk)
		{
			hunPos += zijPIn[i].xy;
			hunGevonden++;
		}
	}

	if(onzeGevonden>0)
	{
		onzePos /= onzeGevonden;
		mijnSpd = mix(mijnSpd, normalize(onzePos - mijnPos), onzeK.y * 0.1);
	}

	if(hunGevonden>0)
	{
		hunPos /= hunGevonden;

		mijnSpd = mix(mijnSpd, normalize(hunPos - mijnPos), onzeK.x * 0.1);
	}

	if(onzeGevonden==0 && hunGevonden==0)
	{
		//mijnSpd = mix(mijnSpd, -1 * normalize(mijnPos), 0.001);
	}


	//if(distance(nieuwePos, vec2(0.0)) > dimensions)
	//	nieuwePos += rotate(normalize(nieuwePos), 1.) * 0.01;

	vec2 nieuwePos = mijnPos + (mijnSpd*0.01);
	vec2 nieuweSpd = mijnSpd;
	

	if(ikOverlapMetAnder && jeBentWolf)
	{
		onzeHL.x = -1.0; //negatieve honger want lekker gesnackt
		//onzeHL.y = 1.5;
	}

	if((!jeBentWolf && ikOverlapMetAnder) || (jeBentWolf && onzeHL.x > 1))
	{
		//Dus maak een nieuwe	
		nieuwePos = onzePos;
		onzeHL  = vec2(0.0, 0.0);

		
		float laagsteHonger = 100000000000.0;


		for(uint i=0; i<onzeLengte; i++)
		{
			if(wijEIn[i].z < laagsteHonger) //want die leeft het langst
			{
				laagsteHonger 	= wijEIn[i].z;
				onzeK   		= wijEIn[i].xy;
				nieuwePos		= wijPIn[i].xz;
				nieuweSpd		= vec2(0.0);
			}
		}

		if(jeBentWolf)
		{
			nieuwePos = vec2(-2, 0);
		}

	}



	//nieuwePos = mod(nieuwePos, dimensions);
	
	if(nieuwePos.x > dimensions)
		nieuwePos.x = -dimensions + max(0.0, nieuwePos.x - dimensions);

	else if(nieuwePos.x < -dimensions)
		nieuwePos.x = dimensions + min(0.0, nieuwePos.x + dimensions);

	if(nieuwePos.y > dimensions)
		nieuwePos.y = -dimensions + max(0.0, nieuwePos.y - dimensions);

	else if(nieuwePos.y < -dimensions)
		nieuwePos.y = dimensions + min(0.0, nieuwePos.y + dimensions);
	

	//nieuwePos -= 0.000001 * nieuwePos;

	wijEUit[gl_GlobalInvocationID.x].xy = onzeK;
	wijEUit[gl_GlobalInvocationID.x].zw = onzeHL;
	wijPUit[gl_GlobalInvocationID.x].xy = nieuwePos;
	wijPUit[gl_GlobalInvocationID.x].zw = nieuweSpd;

}