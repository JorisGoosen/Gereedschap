#version 460

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;
/*
struct
{
	float	heteroKracht,
			homoKracht,	
			honger,		
			levend;		
} dier;

struct
{
	float	posX,
			posY,
			lichtheid,
			roodheid;
} PlaatsKleur;
*/

layout(std430, binding = 0) buffer	wijZijnE	{ vec4 		wijEIn	[]; };
layout(std430, binding = 1) buffer	wijWordenE 	{ vec4 		wijEUit	[]; };
layout(std430, binding = 2) buffer	wijZijnP	{ vec4 		wijPIn	[]; };
layout(std430, binding = 3) buffer	wijWordenP 	{ vec4 		wijPUit	[]; };

layout(std430, binding = 4) buffer	anderP		{ vec4 		zijPIn	[]; };

uniform uint anderLengte;
uniform uint onzeLengte;
uniform bool jeBentWolf;

const float dimensions = 10.0;

vec2 rotate(vec2 uv, float th) {
    return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;
}

float afstandBitte(vec2 a, vec2 b)
{
	return min(
		min(min(distance(a,b), distance(a,b-vec2(dimensions*2, 0))), min(distance(a,b-vec2(0, dimensions*2)), distance(a,b-vec2(dimensions*2, dimensions*2)))),
		min(min(distance(a,b), distance(a,b+vec2(dimensions*2, 0))), min(distance(a,b+vec2(0, dimensions*2)), distance(a,b+vec2(dimensions*2, dimensions*2)))));
}

void main()
{
	vec2 	mijnPos = wijPIn[gl_GlobalInvocationID.x].xy,
			mijnSpd = wijPIn[gl_GlobalInvocationID.x].zw,
		 	onzePos = vec2(0.0),
			hunPos 	= vec2(0.0),
			dichtP	= vec2(0.0),
			onzeK	= wijEIn[gl_GlobalInvocationID.x].xy,
			onzeHL	= wijEIn[gl_GlobalInvocationID.x].zw;


	//if(jeBentWolf)
	//	onzeK.y = -1.0;

	onzeHL.x += 0.001;
	//onzeHL.y -= 0.01;

	bool ikOverlapMetAnder = false;
	const float epsilon = 0.2,
			kijk = jeBentWolf ? 7 : 3;

	float onzeGevonden = 0,
			hunGevonden = 0,
			teDichtbij = 0;

	for(uint i=0; i<onzeLengte; i++)
	{
		float afstand = afstandBitte(wijPIn[i].xy, mijnPos);

		if(afstand < epsilon)
		{
			teDichtbij++;
			dichtP += wijPIn[i].xy;
		}
		else if(afstand < kijk)
		{
			onzePos += wijPIn[i].xy;
			onzeGevonden++;
		}
	}

	for(uint i=0; i<anderLengte; i++)
	{
		float afstand = afstandBitte(mijnPos, zijPIn[i].xy);

		if(afstand < epsilon)
			ikOverlapMetAnder = true;
		else if(afstand < kijk)
		{
			hunPos += zijPIn[i].xy;
			hunGevonden++;
		}
	}

	float mixGehalte = 0.0025;//jeBentWolf ? 0.01 : 0.01;

	//if(length(mijnSpd) <= 0.00001)
	//	mijnSpd = normalize(mijnPos);

	float snelheid = length(mijnSpd);
	vec2 ns = normalize(mijnSpd);
	float hoek = atan(ns.x, ns.y);

	if(onzeGevonden>0)
	{
		onzePos /= onzeGevonden;
		vec2 onzeR = normalize(onzePos - mijnPos);

		mijnSpd = mix(mijnSpd, onzeR * onzeK.y, mixGehalte);
	
		//const float mixMe = 0.25;
		//hoek = mix(hoek, atan(onzeR.x, onzeR.y), mixMe);
		//snelheid = mix(snelheid, onzeK.y,  mixMe);
	}

	if(hunGevonden>0)
	{
		hunPos /= hunGevonden;
		vec2 hunR = normalize(hunPos - mijnPos);
		mijnSpd = mix(mijnSpd, normalize(hunPos - mijnPos) * onzeK.x, mixGehalte);
		const float mixMe = 0.5;
		//hoek = mix(hoek, atan(hunR.x, hunR.y), mixMe);
		//snelheid = mix(snelheid, onzeK.x,  mixMe);
	}


	if(teDichtbij>1)
	{
		dichtP /= teDichtbij;
		mijnSpd = mix(mijnSpd, normalize(mijnPos - dichtP), 0.125);
	}

	if(onzeGevonden==0 && hunGevonden==0)
	{
		//mijnSpd = mix(mijnSpd, -1 * normalize(mijnPos), 0.001);
	}


	// /mijnSpd *= jeBentWolf ? 0.99 : 0.9;

	//const float maxSpd = 2.0;
	//if(length(mijnSpd) > maxSpd)
	//	mijnSpd = normalize(mijnSpd) * maxSpd;
	snelheid = 1.0;// - clamp(onzeHL.x, 0.0, 1.0);
	//mijnSpd = vec2(sin(hoek), cos(hoek)) * snelheid * ( jeBentWolf ? 0.1 : 0.15);


	//if(distance(nieuwePos, vec2(0.0)) > dimensions)
	//	nieuwePos += rotate(normalize(nieuwePos), 1.) * 0.01;

	vec2 nieuwePos = mijnPos + (mijnSpd * 0.1);
	vec2 nieuweSpd = mijnSpd;


	

	if(ikOverlapMetAnder && jeBentWolf)
	{
		onzeHL.x = -2.0; //negatieve honger want lekker gesnackt
		//onzeHL.y = 1.5;
	}

	if((!jeBentWolf && ikOverlapMetAnder) || (jeBentWolf && onzeHL.x > 1))
	{
		//Dus maak een nieuwe	
		nieuwePos = onzePos;
		onzeHL  = vec2(0.0, 0.0);

		
		float hoogsteHonger = -100000000000.0;


		for(uint i=0; i<onzeLengte; i++)
		{
			if(wijEIn[i].z > hoogsteHonger) 
			{
				hoogsteHonger 	= wijEIn[i].z;
				onzeK   		= wijEIn[i].xy;
				nieuwePos		= wijPIn[i].xy;
				nieuweSpd		= vec2(0.0);
			}
		}

		nieuwePos = mix(mijnPos, nieuwePos, 0.5);

	}



	//nieuwePos = mod(nieuwePos, dimensions);
	
	if(nieuwePos.x > dimensions)
		nieuwePos.x = -dimensions + distance(nieuwePos.x, dimensions);

	else if(nieuwePos.x < -dimensions)
		nieuwePos.x = dimensions - distance(nieuwePos.x, dimensions);

	if(nieuwePos.y > dimensions)
		nieuwePos.y = -dimensions + distance(nieuwePos.y, dimensions);

	else if(nieuwePos.y < -dimensions)
		nieuwePos.y = dimensions - distance(nieuwePos.y, dimensions);
	

	//nieuwePos -= 0.000001 * nieuwePos;

	wijEUit[gl_GlobalInvocationID.x].xy = onzeK;
	wijEUit[gl_GlobalInvocationID.x].zw = onzeHL;
	wijPUit[gl_GlobalInvocationID.x].xy = nieuwePos;
	wijPUit[gl_GlobalInvocationID.x].zw = nieuweSpd;

}